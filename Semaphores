#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

void barber();  
void customer();
                               
sem_t seatMutex;       
sem_t customers;       
sem_t smfBarber;       

int runningTime;       
int numberOfFreeSeats; 
int customersCount;    
int customerWait;      
int getHCn;            

pthread_t barberThread;         
pthread_t customersThreads[20]; 


int main() {

    printf("Enter the running time of the program: ");
    scanf("%d",&runningTime);
    printf("Enter the number of free seats: ");
    scanf("%d",&numberOfFreeSeats);
    printf("Enter the customers count: ");
    scanf("%d",&customersCount);
    printf("Enter the maximun waiting time for the customer to come again: ");
    scanf("%d",&customerWait);
    
    getHCn = 0;   
   
    printf("\nProgram is beginning\n\n");
   


    sem_init(&seatMutex,0,1); // the initial value is 1 because we need to allow only one thread to access
    sem_init(&customers,0,0);
    sem_init(&smfBarber,0,0);
   
   
    pthread_create(&barberThread, NULL, barber, NULL); // barber is the function which the thread will start at
    printf("Barber has been created.\n");
    
   
    for (int i = 0; i < customersCount; i++){
	   pthread_create(&customersThreads[i], NULL, customer, NULL); // customer is the function which the thread will start at
	   printf("Customer %u has been created.\n",customersThreads[i]);
    }
   
   
    sleep(runningTime);
     
    printf("\n\nEnd of the day :)\n");
    printf("%d out of %d customers get haircut.",getHCn,customersCount);
    exit(0);
}
void barber() {
    int workingTime; 
     while(1) {
	    sem_wait(&customers);
	    sem_wait(&seatMutex);
	    numberOfFreeSeats += 1;
	    workingTime = (rand() % 5) + 1;
	    printf("Barber took a new customer, and he will take %d seconds for haircut.\n",workingTime);
	  
	    printf("\tNumber of free seats: %d\n",numberOfFreeSeats);
	    sem_post(&smfBarber);
	    sem_post(&seatMutex);
   	    sleep(workingTime);
    } 
}

void customer() {
    int waitingTime;
    int notEnd = 1;
    while(notEnd == 1){
	    sem_wait(&seatMutex);
	    if(numberOfFreeSeats <= 0){
	        waitingTime = (rand() % customerWait) + 1;
		    printf("Customer %u left without haircut, and will come back after %d seconds to try again.\n", pthread_self(),waitingTime);
		    sem_post(&seatMutex); // release the semaphore
		    
	        sleep(waitingTime);
	    }
	    else{
		    numberOfFreeSeats -= 1;
		    printf("Customer %u is waiting.\n",pthread_self());
		    printf("\tNumber of free seats: %d\n",numberOfFreeSeats);
		     
		    sem_post(&customers);
            
		    sem_post(&seatMutex);
            
		    sem_wait(&smfBarber);
            
		    printf("Customer %u get a haircut :)\n",pthread_self());
		    
		    notEnd = 0;
		    getHCn += 1;
	    }
      
     }
}
